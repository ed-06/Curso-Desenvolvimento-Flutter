import 'dart:io';
import 'dart:collection';

class AGrandeBatalhaDasLetras {
  static List<List<String>> tabuleiro = List.generate(
      3, (_) => List.filled(3, '-')); // cria a matriz do tabuleiro
  static bool vezMinuscula = true; // Começa com as minusculas
  static Set<String> letrasMaiusculasUsadas =
      HashSet(); // armazenam as letras maiusculas
  static Set<String> letrasMinusculasUsadas =
      HashSet(); // armazenam as letras minusculas
  static bool ganhouMesmo = false;

  static void primeiroTabuleiro() {
    for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {
        tabuleiro[i][j] = '-';
      }
    }
  }

  static void mostraTabuleiro() {
    for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {
        stdout.write('${tabuleiro[i][j]} ');
      }
      print('');
    }
  }

  static void main() {
    print('');
    print('Batalha das letras!');
    print('Deseja começar o jogo ou carregar um jogo salvo?');
    print('1. Para um novo jogo.');
    print('2. Para carregar um jogo salvo.');
    print('Qualquer outra escolha para sair do jogo!');
    int escolha = int.parse(stdin.readLineSync()!);

    switch (escolha) {
      case 1:
        print('Seja bem-vindo à eterna batalha das letras:');
        print(
            'O objetivo é construir uma ponte completa de tamanho 3 até o outro lado!');
        print('QUE COMECE A BATALHA!');
        primeiroTabuleiro();

        while (true) {
          mostraTabuleiro();
          String jogadorDaVez = vezMinuscula ? 'm' : 'M';
          print('Jogador: $jogadorDaVez, digite a posição da linha:');
          int linha = int.parse(stdin.readLineSync()!);
          print('Jogador: $jogadorDaVez, digite a posição da coluna:');
          int coluna = int.parse(stdin.readLineSync()!);
          print('Qual a letra irá para batalha:');
          String letra = stdin.readLineSync()!.toUpperCase();

          if (linha >= 0 &&
              linha < 3 &&
              coluna >= 0 &&
              coluna < 3 &&
              adicionarEVerificarLetras(linha, coluna, letra)) {
            ganhouMesmo = verificarVitoria();
            if (ganhouMesmo) {
              mostraTabuleiro();
              print('Os guerreiros $jogadorDaVez venceram!');
              break;
            }
            vezMinuscula = !vezMinuscula;
          } else {
            print(
                'Posição fora do tabuleiro ou letra inválida. Tente outra vez.');
          }

          print('Deseja salvar o jogo? s/n');
          String salvarGame = stdin.readLineSync()!.toLowerCase();
          if (salvarGame == 's') {
            salvarJogo();
            break;
          }
        }
        break;
      case 2:
        carregarJogo();
        while (true) {
          mostraTabuleiro();
          String jogadorDaVez = vezMinuscula ? 'm' : 'M';
          print('Jogador: $jogadorDaVez, digite a posição da linha:');
          int linha = int.parse(stdin.readLineSync()!);
          print('Jogador: $jogadorDaVez, digite a posição da coluna:');
          int coluna = int.parse(stdin.readLineSync()!);
          print('Qual a letra irá para batalha:');
          String letra = stdin.readLineSync()!.toUpperCase();

          if (linha >= 0 &&
              linha < 3 &&
              coluna >= 0 &&
              coluna < 3 &&
              adicionarEVerificarLetras(linha, coluna, letra)) {
            ganhouMesmo = verificarVitoria();
            if (ganhouMesmo) {
              mostraTabuleiro();
              print('Os guerreiros $jogadorDaVez venceram!');
              break;
            }
            vezMinuscula = !vezMinuscula;
          } else {
            print(
                'Posição fora do tabuleiro ou letra inválida. Tente outra vez.');
          }

          print('Deseja salvar o jogo? s/n');
          String salvarGame = stdin.readLineSync()!.toLowerCase();
          if (salvarGame == 's') {
            salvarJogo();
            break;
          }
        }
        break;
      default:
        print('Encerrando a batalha!');
        break;
    }
  }

  static bool adicionarEVerificarLetras(int linha, int coluna, String letra) {
    if (linha < 0 || linha > 2 || coluna < 0 || coluna > 2) {
      return false;
    }
    if (tabuleiro[linha][coluna] == '-') {
      if (letra.length == 1 && RegExp(r'[a-zA-Z]').hasMatch(letra)) {
        if (!vezMinuscula &&
            letra == letra.toUpperCase() &&
            !letrasMaiusculasUsadas.contains(letra)) {
          tabuleiro[linha][coluna] = letra;
          letrasMaiusculasUsadas.add(letra);
          return true;
        } else if (vezMinuscula &&
            letra == letra.toLowerCase() &&
            !letrasMinusculasUsadas.contains(letra)) {
          tabuleiro[linha][coluna] = letra;
          letrasMinusculasUsadas.add(letra);
          return true;
        }
      }
    } else {
      String letraNoTabuleiro = tabuleiro[linha][coluna];
      if (!vezMinuscula &&
          letra == letra.toUpperCase() &&
          letraNoTabuleiro == letraNoTabuleiro.toLowerCase() &&
          letra.codeUnitAt(0) > letraNoTabuleiro.toUpperCase().codeUnitAt(0) &&
          !letrasMaiusculasUsadas.contains(letra)) {
        tabuleiro[linha][coluna] = letra;
        letrasMaiusculasUsadas.add(letra);
        return true;
      } else if (vezMinuscula &&
          letra == letra.toLowerCase() &&
          letraNoTabuleiro == letraNoTabuleiro.toUpperCase() &&
          letra.toUpperCase().codeUnitAt(0) > letraNoTabuleiro.codeUnitAt(0) &&
          !letrasMinusculasUsadas.contains(letra)) {
        tabuleiro[linha][coluna] = letra;
        letrasMinusculasUsadas.add(letra);
        return true;
      }
    }
    return false;
  }

  static bool verificarVitoria() {
    for (int i = 0; i < 3; i++) {
      if ((tabuleiro[i][0] == tabuleiro[i][1] &&
              tabuleiro[i][1] == tabuleiro[i][2] &&
              tabuleiro[i][0] != '-') ||
          (tabuleiro[0][i] == tabuleiro[1][i] &&
              tabuleiro[1][i] == tabuleiro[2][i] &&
              tabuleiro[0][i] != '-')) {
        return true;
      }
    }
    if ((tabuleiro[0][0] == tabuleiro[1][1] &&
            tabuleiro[1][1] == tabuleiro[2][2] &&
            tabuleiro[0][0] != '-') ||
        (tabuleiro[0][2] == tabuleiro[1][1] &&
            tabuleiro[1][1] == tabuleiro[2][0] &&
            tabuleiro[0][2] != '-')) {
      return true;
    }
    return false;
  }

  static void salvarJogo() {
    try {
      File file = File('estado_da_batalha.txt');
      IOSink writer = file.openWrite();
      writer.writeln(vezMinuscula ? 'm' : 'M');
      writer.writeln(letrasMinusculasUsadas.join(''));
      writer.writeln(letrasMaiusculasUsadas.join(''));
      for (int i = 0; i < 3; i++) {
        writer.writeln(tabuleiro[i].join(''));
      }
      writer.close();
      print('Jogo salvo com sucesso!');
    } catch (e) {
      print('Erro ao salvar o jogo: $e');
    }
  }

  static void carregarJogo() {
    try {
      File file = File('estado_da_batalha.txt');
      List<String> lines = file.readAsLinesSync();
      vezMinuscula = lines[0] == 'm';
      letrasMinusculasUsadas.clear();
      letrasMaiusculasUsadas.clear();
      letrasMinusculasUsadas.addAll(lines[1].split(''));
      letrasMaiusculasUsadas.addAll(lines[2].split(''));
      for (int i = 0; i < 3; i++) {
        tabuleiro[i] = lines[i + 3].split('');
      }
      print('Batalha carregada');
    } catch (e) {
      print('Erro ao carregar o jogo: $e');
    }
  }
}

void main() {
  AGrandeBatalhaDasLetras.main();
}
